
import logging,logging.handlers,time,os

class Log(object):

    def __init__(self):
        self.logger = logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger()

        LEVELS = {'NOTSET'    :  logging.NOTSET,
                  'DEBUG'     :  logging.DEBUG,
                  'INFO'      :  logging.INFO,
                  'WARNING'   :  logging.WARNING,
                  'ERROR'     :  logging.ERROR,
                  'CRITICAL'  :  logging.CRITICAL}

        timestr = time.strftime('%Y_%m_%d',time.localtime(time.time()))
        lib_path = os.path.abspath(os.path.join(os.path.dirname(__file__),'../logs'))

        #if not os.path.exists(lib_path):
        #    os.mkdir(lib_path)   

        self.logname =  os.path.join(lib_path,''.join(timestr + '.log'))

        self.formatter = logging.Formatter(
                            '[%(asctime)s]-[%(filename)s]-[%(levelname)s] : %(message)s')
                            #'[%(asctime)s]-[%(filename)s]-[%(thread)d]-[%(module)s]-[%(funcName)s]-[%(levelname)s] : %(message)s')

        fh = logging.handlers.RotatingFileHandler(filename=self.logname,
                                                  maxBytes=1024*1024*50,
                                                  backupCount=5)
        #fh.setLevel(logging.INFO)
        fh.setFormatter(self.formatter)
        self.logger.addHandler(fh)

        ch = logging.StreamHandler()
        #ch.setLevel(logging.INFO)
        ch.setFormatter(self.formatter)
        self.logger.addHandler(ch)

        fh.close()

    def info(self,message):
        self.logger.info(message)


    def debug(self,message):
        self.logger.debug(message)

    def warning(self,message):
        self.logger.warning(message)

    def error(self,message):
        self.logger.error(message)

    def critical(self,message):
        self.logger.critical(message)



if __name__ == "__main__":
    log = Log()
    log.info("this is info")
    log.info("this is info")
    log.warning("this is info")
    log.error("this is error")
    log.critical("this is critical")





